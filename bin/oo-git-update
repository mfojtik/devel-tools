#!/bin/env ruby
#
# Synchronize all GIT repositories in folder so the
# local master is sync with upstream/master.
#
# Dependencies: gem install ruby-progressbar
#
# * It will ask for stash if local modifications
# * It skip repo if there is no 'upstream' remote
#
# To make this script work your repo needs to have upstream remote:
#
# $ ...fork something....
# $ git clone git@github.com:mfojtik/forked_repo.git
# $ git add remote upstream <original git repo>
#

require 'rubygems'
require 'ruby-progressbar'

# Path to the GIT repositories folder
#
REPOSITORIES_FOLDER = File.join(ENV['HOME'], 'code', 'rh')

REPOS = [
  'django-example',
  'rails-example',
  'wordpress-example',
  'docker-image-examples',
  'openshift-extras',
  'openshift-pep',
  'origin-dev-tools',
  'vagrant-openshift',
  'li',
  'openshift/docker-source-to-images',
  'openshift/geard',
  'openshift/origin-server',
  'openshift/puppet-openshift_origin',
  'openshift/rhc',
  'openshift/ruby-19-centos',
  'openshift/wildfly-8-centos',
]

def accept?(question)
  begin
    print "#{question.strip} (Y/n/a):"
    answer = $stdin.gets.chomp
    case answer
      when /(Y|y|yes)/ then true
      when /(N|n|no)/ then false
      when /(A|a|abort)/ then exit(1)
      else raise 'ERROR: Please answer "y" (yes) or "n" (no) or "a" (abort).'
    end
  rescue => e
    puts e.message && retry
  end
end

def stash_repo(repo_dir)
  Dir.chdir(repo_dir) do
    result = %x[git stash 2>/dev/null]
    if $?.to_i == 0
      repo_dir
    else
      puts "ERROR: #{result}"
      accept?("Skip repository #{File.basename(repo_dir)}") ? nil : exit(1)
    end
  end
end

def change_log(from)
  %x[git log --no-merges --pretty=format:'%C(auto)%h %C(blue)%ae - %C(reset)%s' #{from}..HEAD]
end

def has_upstream?(repo_dir)
  Dir.chdir(repo_dir) {
    %x[git remote].split("\n").include?("upstream")
  }
end

def is_ignored?(repo_dir)
  Dir.chdir(repo_dir) { File.exists?('.update_ignore') }
end

update_repos = []
repo_refs = {}
repos_to_update = ARGV[0] || '*'
repos_to_update = File.basename(Dir.pwd) if repos_to_update == '.'

REPOS.each do |r|
  repo = File.join(REPOSITORIES_FOLDER, r)
  unless Dir.exists?(repo)
    puts "[WARN]: Repository #{repo} does not exists."
    next
  end
  Dir.chdir(repo) do
    unless has_upstream?(repo)
      puts "No 'upstream' for #{repo}"
      next
    end
    next if is_ignored?(repo)
    %x[git checkout master 2>/dev/null]
    repo_refs[r] = %x[git rev-parse --short HEAD].strip
    if $?.to_i == 0
      (update_repos << repo) && next
    else
      if accept?("Local changes found in '#{r}'. Stash? ")
        stash_repo(repo)
      end
    end
  end
end

update_repos.sort!

progressbar = ProgressBar.create(total: update_repos.count)
puts "Updating #{update_repos.count} repositories under #{REPOSITORIES_FOLDER}"
mutex = Mutex.new

threads = []

update_repos.each do |repo|
  threads << Thread.new {
    %x[
      pushd #{repo} >/dev/null;
      git fetch upstream 2>/dev/null && \
      git fetch upstream --tags 2>/dev/null && \
      git merge upstream/master 2>/dev/null && \
      git push origin master 2>/dev/null && \
      git push --tags 2>/dev/null && \
      popd >/dev/null;
    ]
    mutex.synchronize {
      progressbar.title = "#{File.basename(repo)}.git"
      progressbar.increment
    }
  }
end

threads.each { |t| t.join }

progressbar.finish

puts "Updating Vagrantfile..."

progressbar = ProgressBar.create(total: 2, title: 'vagrant:install')
if REPOS.include?('vagrant-openshift')
  Dir.chdir(File.join(REPOSITORIES_FOLDER, 'vagrant-openshift')) do
    %x[rake vagrant:install]
    progressbar.increment
  end
  if Dir.exists?(File.join(REPOSITORIES_FOLDER, 'openshift'))
    Dir.chdir(File.join(REPOSITORIES_FOLDER, 'openshift')) do
      progressbar.title = "vagrant:origin-init"
      %x[vagrant origin-init --os fedora]
      progressbar.increment
    end
  end
end

progressbar.finish

report = ""

repo_refs.each do |repo, ref|
  repo_dir = File.join(REPOSITORIES_FOLDER, repo)
  Dir.chdir(repo_dir) {
    if (log = change_log(ref)) != ""
      report += "\n(#{ref}..HEAD)#{repo}:\n#{log}\n"
    end
  }
end

puts report if report != ""
